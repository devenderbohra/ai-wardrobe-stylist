/**
 * Core types for the AI Wardrobe Stylist application
 * Based on technical specifications and feature requirements
 */

// Clothing categories for wardrobe organization
export type ClothingCategory = 
  | 'tops'
  | 'bottoms' 
  | 'dresses'
  | 'outerwear'
  | 'shoes'
  | 'accessories';

// Specific clothing types for detailed classification
export type ClothingType = 
  | 't-shirt'
  | 'shirt'
  | 'blouse'
  | 'sweater'
  | 'tank-top'
  | 'hoodie'
  | 'jeans'
  | 'pants'
  | 'shorts'
  | 'skirt'
  | 'leggings'
  | 'dress'
  | 'jacket'
  | 'coat'
  | 'cardigan'
  | 'sneakers'
  | 'boots'
  | 'heels'
  | 'sandals'
  | 'bag'
  | 'jewelry'
  | 'hat'
  | 'scarf'
  | 'belt'
  | 'other';

// Occasions for outfit recommendations (MVP focus)
export type Occasion = 
  | 'casual'
  | 'work'
  | 'date'
  | 'formal'
  | 'party';

// Style classifications
export type StyleType = 
  | 'casual'
  | 'business'
  | 'elegant'
  | 'sporty'
  | 'trendy';

// Season classifications for recommendations
export type Season = 'spring' | 'summer' | 'fall' | 'winter' | 'all-season';

// Color classifications for outfit coordination
export type ColorFamily = 
  | 'red'
  | 'blue'
  | 'green'
  | 'yellow'
  | 'orange'
  | 'purple'
  | 'pink'
  | 'brown'
  | 'black'
  | 'white'
  | 'gray'
  | 'beige'
  | 'navy'
  | 'multi';

/**
 * User profile interface - stores photos and preferences
 */
export interface User {
  id: string;
  name: string;
  email?: string;
  photos: {
    headshot?: string;
    fullBody?: string;
    side?: string;
  };
  preferences: {
    styles: StyleType[];
    bodyType?: string;
    favoriteColors: ColorFamily[];
  };
  createdAt: Date;
  updatedAt: Date;
}

/**
 * Clothing item interface - represents individual wardrobe pieces
 */
export interface ClothingItem {
  id: string;
  userId: string;
  name: string;
  category: ClothingCategory;
  type?: ClothingType;
  imageUrl: string;
  thumbnailUrl?: string;
  colors: ColorFamily[];
  primaryColor: ColorFamily;
  style: StyleType;
  season: Season[];
  tags: string[];
  sourceUrl?: string; // Original URL if imported from e-commerce
  brand?: string;
  size?: string;
  dateAdded: Date;
  lastWorn?: Date;
  wearCount: number;
  isFavorite: boolean;
  notes?: string;
  // AI analysis metadata
  aiAnalysis?: {
    confidence: number;
    description: string;
    suggestedCategory: ClothingCategory;
    suggestedColors: ColorFamily[];
    analysisDate: Date;
  };
}

/**
 * Outfit interface - represents styled combinations
 */
export interface Outfit {
  id: string;
  userId: string;
  name: string;
  occasion: Occasion;
  items: ClothingItem[];
  styledImageUrl?: string; // Generated by Gemini API
  originalUserPhoto: string; // Base user photo used
  isFavorite: boolean;
  rating?: number; // 1-5 stars
  notes?: string;
  tags: string[];
  createdAt: Date;
  lastWorn?: Date;
  wearCount: number;
  isAIGenerated: boolean;
  generationPrompt?: string; // Prompt used for Gemini API
}

/**
 * Style preferences for personalized recommendations
 */
export interface StylePreferences {
  favoriteColors: ColorFamily[];
  preferredStyles: StyleType[];
  avoidColors?: ColorFamily[];
  preferredOccasions: Occasion[];
  bodyType?: string;
}

/**
 * API response wrapper
 */
export interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
}

/**
 * Gemini API integration interfaces
 */
export interface GeminiImageRequest {
  userPhoto: string; // Base64 encoded
  clothingItems: string[]; // Base64 encoded clothing images
  occasion: Occasion;
  prompt: string;
}

export interface GeminiImageResponse {
  success: boolean;
  imageUrl?: string;
  error?: string;
  generationTime?: number;
}

/**
 * Outfit recommendation request
 */
export interface OutfitRecommendationRequest {
  userId: string;
  occasion: Occasion;
  season?: Season;
  preferredColors?: ColorFamily[];
  excludeItemIds?: string[];
  includeItemIds?: string[];
  maxRecommendations?: number;
}

/**
 * Outfit recommendation response
 */
export interface OutfitRecommendation {
  items: ClothingItem[];
  confidence: number;
  reasoning: string;
  styleScore: number;
  colorHarmony: number;
  occasion: Occasion;
}

export interface OutfitRecommendationResponse {
  recommendations: OutfitRecommendation[];
  totalCount: number;
  processingTime: number;
}

/**
 * File upload interfaces
 */
export interface UploadProgress {
  id: string;
  file: File;
  progress: number;
  status: 'pending' | 'uploading' | 'processing' | 'analyzing' | 'complete' | 'error';
  error?: string;
  result?: ClothingItem;
}

export interface ImageUploadResult {
  url: string;
  thumbnailUrl?: string;
  width: number;
  height: number;
  fileSize: number;
}

/**
 * URL import interfaces for e-commerce integration
 */
export interface UrlImportRequest {
  url: string;
  userId: string;
}

export interface UrlImportResult {
  success: boolean;
  item?: ClothingItem;
  error?: string;
  extractedData?: {
    title: string;
    imageUrl: string;
    price?: string;
    brand?: string;
    description?: string;
  };
}

/**
 * Wardrobe filtering and sorting
 */
export interface WardrobeFilters {
  categories?: ClothingCategory[];
  colors?: ColorFamily[];
  styles?: StyleType[];
  occasions?: Occasion[];
  seasons?: Season[];
  tags?: string[];
  favorites?: boolean;
  neverWorn?: boolean;
  recentlyAdded?: boolean;
  searchQuery?: string;
}

export type SortField = 
  | 'dateAdded'
  | 'name'
  | 'category'
  | 'lastWorn'
  | 'wearCount'
  | 'color';

export type SortDirection = 'asc' | 'desc';

export interface SortOptions {
  field: SortField;
  direction: SortDirection;
}

/**
 * Wardrobe statistics for dashboard
 */
export interface WardrobeStats {
  totalItems: number;
  itemsByCategory: Record<ClothingCategory, number>;
  itemsByColor: Record<ColorFamily, number>;
  mostWornItems: ClothingItem[];
  leastWornItems: ClothingItem[];
  recentlyAdded: ClothingItem[];
  favoriteOutfits: Outfit[];
  totalOutfits: number;
}

/**
 * Form interfaces for UI components
 */
export interface UserOnboardingForm {
  name: string;
  photos: {
    headshot?: File;
    fullBody?: File;
  };
  preferences: {
    styles: StyleType[];
    favoriteColors: ColorFamily[];
    bodyType?: string;
  };
}

export interface ClothingItemForm {
  name: string;
  category: ClothingCategory;
  type?: ClothingType;
  colors: ColorFamily[];
  primaryColor: ColorFamily;
  style: StyleType;
  season: Season[];
  tags: string[];
  brand?: string;
  size?: string;
  notes?: string;
}

/**
 * Component prop interfaces
 */
export interface BaseComponentProps {
  className?: string;
  children?: React.ReactNode;
}

export interface LoadingState {
  isLoading: boolean;
  progress?: number;
  message?: string;
}

export interface ErrorState {
  hasError: boolean;
  error?: Error | string;
  retry?: () => void;
}